#!/bin/sh

set -e

SAVEPOINT_DIR="${RURA_SAVEPOINT_DIR:-$HOME/.rura}"
VERSION="0.2.0"

mkdir -p "$SAVEPOINT_DIR"

print_usage() {
  cat << EOF
⚡ Rura - A simple CLI tool to save and jump to directories.

Usage:
  rura! @<name>                    # Jump to savepoint (your 'cd -P' alias command)
  rura add|a <directory> <name>    # Add a savepoint
  rura delete|d <name>             # Delete a savepoint
  rura list|l                      # List all savepoints
  rura help|h                      # Show this help message
  rura version|v                   # Show version

Examples:
  rura! @work                      # Jump to 'work' directory (your 'cd -P' alias command)
  rura add . work                  # Save current directory as 'work'
  rura add /path/to/dir work       # Save specific directory as 'work'
  rura delete work                 # Delete 'work' savepoint
  rura list                        # List all savepoints

Environment Variables:
  RURA_SAVEPOINT_DIR               # Savepoint storage directory (default: ~/.rura)
EOF
}

print_version() {
  echo "rura version $VERSION"
}

add_savepoint() {
  local target_dir="$1"
  local savepoint_name="$2"

  if [ -z "$target_dir" ] || [ -z "$savepoint_name" ]; then
    echo "Error: Both directory and savepoint name are required" >&2
    echo "Usage: rura add <directory> <name>" >&2
    return 1
  fi

  if [ ! -d "$target_dir" ]; then
    echo "Error: Directory not found: $target_dir" >&2
    return 1
  fi

  local current_dir="$(pwd)"
  cd "$target_dir" || return 1
  local src="$(pwd)"
  cd "$current_dir" || return 1

  local savepoint_path="$SAVEPOINT_DIR/@$savepoint_name"

  if [ -e "$savepoint_path" ]; then
    echo "Error: Savepoint already exists: $savepoint_name" >&2
    echo "Use 'rura delete $savepoint_name' first to replace it" >&2
    return 1
  fi

  ln -s "$src" "$savepoint_path"
  echo "⚡ Saved: @$savepoint_name -> $src"
}

delete_savepoint() {
  local savepoint_name="$1"

  if [ -z "$savepoint_name" ]; then
    echo "Error: Savepoint name is required" >&2
    echo "Usage: rura delete <name>" >&2
    return 1
  fi

  local savepoint_path="$SAVEPOINT_DIR/@$savepoint_name"

  if [ ! -L "$savepoint_path" ]; then
    echo "Error: Savepoint not found: $savepoint_name" >&2
    return 1
  fi

  local src="$(readlink "$savepoint_path")"

  printf "Remove savepoint '%s' -> %s? [y/N]: " "$savepoint_name" "$src"
  read -r yn

  if [ "$yn" != "Y" ] && [ "$yn" != "y" ]; then
    echo "Cancelled"
    return 0
  fi

  unlink "$savepoint_path"
  echo "⚡ Removed: @$savepoint_name"
}

list_savepoints() {
  if [ ! -d "$SAVEPOINT_DIR" ] || [ -z "$(ls -A "$SAVEPOINT_DIR" 2>/dev/null)" ]; then
    echo "No savepoints found"
    return 0
  fi

  for savepoint in "$SAVEPOINT_DIR"/@*; do
    if [ -L "$savepoint" ]; then
      local name="$(basename "$savepoint" | sed 's/^@//')"
      local target="$(readlink "$savepoint")"
      local exists="o"

      if [ ! -d "$target" ]; then
        exists="x"
      fi

      printf "  %s %-20s -> %s\n" "$exists" "@$name" "$target"
    fi
  done
}

main() {
  local command="$1"
  shift || true

  case "$command" in
    add|a)
      add_savepoint "$@"
      ;;
    delete|d)
      delete_savepoint "$@"
      ;;
    list|l)
      list_savepoints "$@"
      ;;
    help|h|"")
      print_usage
      ;;
    version|v)
      print_version
      ;;
    *)
      echo "Error: Unknown command: $command" >&2
      echo "Run 'rura help' for usage information" >&2
      return 1
      ;;
  esac
}

main "$@"
